__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = require(_dependencyMap[1], "./../../../node_modules/react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/var/www/mobile/SDCAConnectMobile/src/screens/pendingtasks/index.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _nativeBase = require(_dependencyMap[2], "native-base");

  var _TaskListItemView = require(_dependencyMap[3], "./TaskListItemView");

  var _TaskListItemView2 = _interopRequireDefault(_TaskListItemView);

  var _reactNative = require(_dependencyMap[4], "realm/react-native");

  var _TaskService = require(_dependencyMap[5], "../../services/TaskService");

  var _TaskService2 = _interopRequireDefault(_TaskService);

  var _styles = require(_dependencyMap[6], "./styles");

  var _styles2 = _interopRequireDefault(_styles);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    PendingTasksScreen: {
      displayName: "PendingTasksScreen"
    }
  };

  var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/var/www/mobile/SDCAConnectMobile/src/screens/pendingtasks/index.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var PendingTasksScreen = _wrapComponent("PendingTasksScreen")(function (_Component) {
    _inherits(PendingTasksScreen, _Component);

    function PendingTasksScreen(props) {
      _classCallCheck(this, PendingTasksScreen);

      var _this = _possibleConstructorReturn(this, (PendingTasksScreen.__proto__ || Object.getPrototypeOf(PendingTasksScreen)).call(this, props));

      var tasks = Array.from(_TaskService2.default.findAll());
      console.log('Tasks', tasks);
      var ds = new _reactNative.ListView.DataSource({
        rowHasChanged: function rowHasChanged(r1, r2) {
          return r1 !== r2;
        }
      });
      _this.state = {
        dataSource: ds.cloneWithRows(tasks)
      };
      console.log(_this.props.navigation.state);
      return _this;
    }

    _createClass(PendingTasksScreen, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react3.default.createElement(
          _nativeBase.Container,
          {
            style: _styles2.default.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 50
            }
          },
          _react3.default.createElement(
            _nativeBase.Header,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 51
              }
            },
            _react3.default.createElement(
              _nativeBase.Left,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 52
                }
              },
              _react3.default.createElement(
                _nativeBase.Button,
                {
                  transparent: true,
                  onPress: function onPress() {
                    return _this2.props.navigation.navigate("DrawerOpen");
                  },
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 53
                  }
                },
                _react3.default.createElement(_nativeBase.Icon, {
                  name: "ios-menu",
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 56
                  }
                })
              )
            ),
            _react3.default.createElement(
              _nativeBase.Body,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 59
                }
              },
              _react3.default.createElement(
                _nativeBase.View,
                {
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 60
                  }
                },
                _react3.default.createElement(
                  _nativeBase.Title,
                  {
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 61
                    }
                  },
                  "Pending Tasks"
                )
              )
            ),
            _react3.default.createElement(_nativeBase.Right, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 64
              }
            })
          ),
          _react3.default.createElement(
            _nativeBase.Content,
            {
              padder: true,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 67
              }
            },
            _react3.default.createElement(
              _nativeBase.View,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 68
                }
              },
              _react3.default.createElement(_reactNative.ListView, {
                dataSource: this.state.dataSource,
                renderRow: function renderRow(rowData) {
                  return _react3.default.createElement(_TaskListItemView2.default, {
                    task: rowData,
                    navigation: _this2.props.navigation,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 71
                    }
                  });
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 69
                }
              })
            )
          ),
          _react3.default.createElement(
            _nativeBase.Footer,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 75
              }
            },
            _react3.default.createElement(
              _nativeBase.FooterTab,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 76
                }
              },
              _react3.default.createElement(
                _nativeBase.Button,
                {
                  active: true,
                  full: true,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 77
                  }
                },
                _react3.default.createElement(
                  _nativeBase.Text,
                  {
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 78
                    }
                  },
                  "Refresh"
                )
              )
            )
          )
        );
      }
    }]);

    return PendingTasksScreen;
  }(_react2.Component));

  exports.default = PendingTasksScreen;
});