__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = require(_dependencyMap[1], "./../../../node_modules/react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/var/www/mobile/SDCAConnectMobile/src/screens/pendingtasks/TaskListItemView.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _nativeBase = require(_dependencyMap[2], "native-base");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    TaskListItemView: {
      displayName: "TaskListItemView"
    }
  };

  var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/var/www/mobile/SDCAConnectMobile/src/screens/pendingtasks/TaskListItemView.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var TaskListItemView = _wrapComponent("TaskListItemView")(function (_Component) {
    _inherits(TaskListItemView, _Component);

    function TaskListItemView() {
      _classCallCheck(this, TaskListItemView);

      return _possibleConstructorReturn(this, (TaskListItemView.__proto__ || Object.getPrototypeOf(TaskListItemView)).apply(this, arguments));
    }

    _createClass(TaskListItemView, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var task = this.props.task;
        var typeDisplay = '';

        switch (task.typeCode) {
          case 'A':
            typeDisplay = 'Assignment';
            break;

          case 'Q':
            typeDisplay = 'Quiz';
            break;
        }

        return _react3.default.createElement(
          _nativeBase.View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 27
            }
          },
          _react3.default.createElement(
            _nativeBase.ListItem,
            {
              avatar: true,
              onPress: function onPress() {
                return _this2.props.navigation.navigate('PendingTaskScreen', {
                  task: task
                });
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 28
              }
            },
            _react3.default.createElement(
              _nativeBase.Body,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 29
                }
              },
              _react3.default.createElement(
                _nativeBase.Text,
                {
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 30
                  }
                },
                task.displayName
              ),
              _react3.default.createElement(
                _nativeBase.Text,
                {
                  note: true,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 31
                  }
                },
                task.description
              )
            ),
            _react3.default.createElement(
              _nativeBase.Right,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 33
                }
              },
              _react3.default.createElement(
                _nativeBase.Text,
                {
                  note: true,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 34
                  }
                },
                typeDisplay
              )
            )
          )
        );
      }
    }]);

    return TaskListItemView;
  }(_react2.Component));

  exports.default = TaskListItemView;
});