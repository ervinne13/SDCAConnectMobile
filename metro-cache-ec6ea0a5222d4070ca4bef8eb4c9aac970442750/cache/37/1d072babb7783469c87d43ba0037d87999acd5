__d(function (global, require, module, exports, _dependencyMap) {
  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _API = require(_dependencyMap[0], "./API");

  var _API2 = _interopRequireDefault(_API);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var UserAPI = function () {
    function UserAPI(server) {
      _classCallCheck(this, UserAPI);

      this.server = server;
    }

    _createClass(UserAPI, [{
      key: "checkToken",
      value: function checkToken(token) {
        var url, response;
        return regeneratorRuntime.async(function checkToken$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                url = this.server + '/api/v1/mobile/current-user';
                url += '?token=' + token;
                _context.next = 4;
                return regeneratorRuntime.awrap(fetch(url));

              case 4:
                response = _context.sent;
                return _context.abrupt("return", _API2.default.handleResponse(response));

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }]);

    return UserAPI;
  }();

  module.exports = UserAPI;
});