__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = require(_dependencyMap[1], "./node_modules/react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/var/www/mobile/SDCAConnectMobile/App.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _setup = require(_dependencyMap[2], "./src/boot/setup");

  var _setup2 = _interopRequireDefault(_setup);

  var _login = require(_dependencyMap[3], "./src/screens/login");

  var _login2 = _interopRequireDefault(_login);

  var _splashscreen = require(_dependencyMap[4], "./src/screens/splashscreen");

  var _splashscreen2 = _interopRequireDefault(_splashscreen);

  var _pendingtasks = require(_dependencyMap[5], "./src/screens/pendingtasks");

  var _pendingtasks2 = _interopRequireDefault(_pendingtasks);

  var _UserAPI = require(_dependencyMap[6], "./src/api/UserAPI");

  var _UserAPI2 = _interopRequireDefault(_UserAPI);

  var _Task = require(_dependencyMap[7], "./src/models/Task");

  var _Task2 = _interopRequireDefault(_Task);

  var _TaskService = require(_dependencyMap[8], "./src/services/TaskService");

  var _TaskService2 = _interopRequireDefault(_TaskService);

  var _reactNative = require(_dependencyMap[9], "react-native");

  var _nativeBase = require(_dependencyMap[10], "native-base");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    App: {
      displayName: "App"
    }
  };

  var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/var/www/mobile/SDCAConnectMobile/App.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var App = _wrapComponent("App")(function (_React$Component) {
    _inherits(App, _React$Component);

    function App(props) {
      _classCallCheck(this, App);

      var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));

      _this.state = {
        loading: true,
        authenticated: false
      };
      return _this;
    }

    _createClass(App, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var authenticationToken, connectionInfo, userAPI;
        return regeneratorRuntime.async(function componentDidMount$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                console.log('mounted');
                _context.next = 3;
                return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem('@Connect:AuthToken'));

              case 3:
                authenticationToken = _context.sent;

                if (!authenticationToken) {
                  _context.next = 23;
                  break;
                }

                this.setState({
                  authenticated: true
                });
                console.log('authenticated, now validating if token is still valid');
                _context.next = 9;
                return regeneratorRuntime.awrap(_reactNative.NetInfo.getConnectionInfo());

              case 9:
                connectionInfo = _context.sent;

                if (!(connectionInfo.type == 'none')) {
                  _context.next = 15;
                  break;
                }

                console.log('Checking is aborted, no connection to server');
                this.setState({
                  authenticated: true
                });
                this.setState({
                  loading: false
                });
                return _context.abrupt("return");

              case 15:
                _context.t0 = _UserAPI2.default;
                _context.next = 18;
                return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem('@Connect:Server'));

              case 18:
                _context.t1 = _context.sent;
                userAPI = new _context.t0(_context.t1);
                userAPI.checkToken(authenticationToken).then(function () {
                  _this2.setState({
                    authenticated: true
                  });

                  _this2.setState({
                    loading: false
                  });

                  _this2.beginSync();
                }).catch(function (err) {
                  if (err === 401) {
                    _this2.setState({
                      authenticated: false
                    });
                  } else {
                    console.error(err);
                    throw new Error(err);
                  }

                  _this2.setState({
                    loading: false
                  });
                });
                _context.next = 24;
                break;

              case 23:
                this.setState({
                  loading: false
                });

              case 24:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "processUserInfo",
      value: function processUserInfo(userInfo) {
        return regeneratorRuntime.async(function processUserInfo$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                console.log('Processing user info', userInfo);

                if (!(userInfo.token && userInfo.display_name)) {
                  _context2.next = 9;
                  break;
                }

                _context2.next = 4;
                return regeneratorRuntime.awrap(_reactNative.AsyncStorage.setItem('@Connect:UserDisplayName', userInfo.display_name));

              case 4:
                _context2.next = 6;
                return regeneratorRuntime.awrap(_reactNative.AsyncStorage.setItem('@Connect:AuthToken', userInfo.token));

              case 6:
                this.setState({
                  authenticated: true
                });
                console.log('Welcome ' + userInfo.display_name);
                this.beginSync();

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "beginSync",
      value: function beginSync() {
        var _this3 = this;

        var AuthToken, server;
        return regeneratorRuntime.async(function beginSync$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem('@Connect:AuthToken'));

              case 2:
                AuthToken = _context3.sent;
                _context3.next = 5;
                return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem('@Connect:Server'));

              case 5:
                server = _context3.sent;

                _TaskService2.default.beginSync(server, AuthToken).then(function () {
                  _nativeBase.Toast.show({
                    text: 'Tasks Synchronized',
                    position: 'bottom'
                  });
                }).catch(function (err) {
                  if (err === 401) {
                    _this3.setState({
                      authenticated: false
                    });
                  } else {
                    console.error(err);
                    throw new Error(err);
                  }
                });

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        if (this.state.loading) {
          return _react3.default.createElement(
            _nativeBase.Root,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 98
              }
            },
            _react3.default.createElement(_splashscreen2.default, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 99
              }
            })
          );
        } else if (!this.state.authenticated) {
          return _react3.default.createElement(_login2.default, {
            onLoginSuccess: function onLoginSuccess(userInfo) {
              return _this4.processUserInfo(userInfo);
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 103
            }
          });
        } else {
          return _react3.default.createElement(
            _nativeBase.Root,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 106
              }
            },
            _react3.default.createElement(_setup2.default, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 107
              }
            })
          );
        }
      }
    }]);

    return App;
  }(_react3.default.Component));

  exports.default = App;
});