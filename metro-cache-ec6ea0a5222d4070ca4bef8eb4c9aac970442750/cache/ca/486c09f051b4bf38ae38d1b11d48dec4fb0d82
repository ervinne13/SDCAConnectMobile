__d(function (global, require, module, exports, _dependencyMap) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/var/www/mobile/SDCAConnectMobile/node_modules/realm/react-native/listview.js";

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _propTypes = require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNative = require(_dependencyMap[3], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        ListView: {
            displayName: "ListView"
        }
    };

    var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/var/www/mobile/SDCAConnectMobile/node_modules/realm/react-native/listview.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _reactTransformHmrLibIndexJs2(Component, id);
        };
    }

    function hashObjects(array) {
        var hash = Object.create(null);

        for (var i = 0, len = array.length; i < len; i++) {
            hash[array[i]] = true;
        }

        return hash;
    }

    var ListViewDataSource = function (_BaseListView$DataSou) {
        _inherits(ListViewDataSource, _BaseListView$DataSou);

        function ListViewDataSource() {
            _classCallCheck(this, ListViewDataSource);

            return _possibleConstructorReturn(this, (ListViewDataSource.__proto__ || Object.getPrototypeOf(ListViewDataSource)).apply(this, arguments));
        }

        _createClass(ListViewDataSource, [{
            key: "cloneWithRowsAndSections",
            value: function cloneWithRowsAndSections(inputData, sectionIds, rowIds) {
                var data = {};

                for (var sectionId in inputData) {
                    var items = inputData[sectionId];
                    var copy = void 0;

                    if (typeof items.snapshot == 'function') {
                        copy = items.snapshot();
                    } else if (Array.isArray(items)) {
                        copy = items.slice();
                    } else {
                        copy = _extends({}, items);
                    }

                    data[sectionId] = copy;
                }

                if (!sectionIds) {
                    sectionIds = Object.keys(data);
                }

                if (!rowIds) {
                    rowIds = sectionIds.map(function (sectionId) {
                        var items = data[sectionId];

                        if (typeof items.snapshot != 'function') {
                            return Object.keys(items);
                        }

                        var count = items.length;
                        var indexes = new Array(count);

                        for (var i = 0; i < count; i++) {
                            indexes[i] = i;
                        }

                        return indexes;
                    });
                }

                var newSource = new this.constructor({
                    getRowData: this._getRowData,
                    getSectionHeaderData: this._getSectionHeaderData,
                    rowHasChanged: this._rowHasChanged,
                    sectionHeaderHasChanged: this._sectionHeaderHasChanged
                });
                newSource._cachedRowCount = rowIds.reduce(function (n, a) {
                    return n + a.length;
                }, 0);
                newSource._dataBlob = data;
                newSource.sectionIdentities = sectionIds;
                newSource.rowIdentities = rowIds;
                var prevSectionIds = this.sectionIdentities;
                var prevRowIds = this.rowIdentities;
                var prevRowHash = {};

                for (var i = 0, len = prevRowIds.length; i < len; i++) {
                    prevRowHash[prevSectionIds[i]] = hashObjects(prevRowIds[i]);
                }

                newSource._prevDataBlob = this._dataBlob;
                newSource._prevSectionHash = hashObjects(prevSectionIds);
                newSource._prevRowHash = prevRowHash;
                return newSource;
            }
        }, {
            key: "getRowData",
            value: function getRowData() {
                return null;
            }
        }, {
            key: "getRow",
            value: function getRow(sectionId, rowId) {
                return this._getRowData(this._dataBlob, sectionId, rowId);
            }
        }, {
            key: "sectionHeaderShouldUpdate",
            value: function sectionHeaderShouldUpdate(sectionIndex) {
                var dirtySections = this._dirtySections;
                var dirty = void 0;

                if ((dirty = dirtySections[sectionIndex]) != null) {
                    return dirty;
                }

                var sectionId = this.sectionIdentities[sectionIndex];
                var sectionHeaderHasChanged = this._sectionHeaderHasChanged;

                if (this._prevSectionHash[sectionId] && sectionHeaderHasChanged) {
                    dirty = sectionHeaderHasChanged(this._getSectionHeaderData(this._prevDataBlob, sectionId), this._getSectionHeaderData(this._dataBlob, sectionId));
                }

                return dirtySections[sectionIndex] = dirty !== false;
            }
        }, {
            key: "rowShouldUpdate",
            value: function rowShouldUpdate(sectionIndex, rowIndex) {
                var dirtyRows = this._dirtyRows[sectionIndex];
                var dirty = void 0;

                if (!dirtyRows) {
                    dirtyRows = this._dirtyRows[sectionIndex] = [];
                } else if ((dirty = dirtyRows[rowIndex]) != null) {
                    return dirty;
                }

                var sectionId = this.sectionIdentities[sectionIndex];

                if (this._prevSectionHash[sectionId]) {
                    var rowId = this.rowIdentities[sectionIndex][rowIndex];

                    if (this._prevRowHash[sectionId][rowId]) {
                        var prevItem = this._getRowData(this._prevDataBlob, sectionId, rowId);

                        if (prevItem) {
                            var item = this._getRowData(this._dataBlob, sectionId, rowId);

                            if (item) {
                                dirty = this._rowHasChanged(prevItem, item);
                            }
                        }
                    }
                }

                return dirtyRows[rowIndex] = dirty !== false;
            }
        }]);

        return ListViewDataSource;
    }(_reactNative.ListView.DataSource);

    var ListView = _wrapComponent("ListView")(function (_React$Component) {
        _inherits(ListView, _React$Component);

        function ListView(props) {
            _classCallCheck(this, ListView);

            var _this2 = _possibleConstructorReturn(this, (ListView.__proto__ || Object.getPrototypeOf(ListView)).call(this, props));

            _this2.renderRow = _this2.renderRow.bind(_this2);
            return _this2;
        }

        _createClass(ListView, [{
            key: "render",
            value: function render() {
                return _react3.default.createElement(_reactNative.ListView, _extends({}, this.props, {
                    ref: "listView",
                    renderRow: this.renderRow,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 174
                    }
                }));
            }
        }, {
            key: "renderRow",
            value: function renderRow(_, sectionId, rowId) {
                var props = this.props;
                var item = props.dataSource.getRow(sectionId, rowId);

                for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
                    args[_key - 3] = arguments[_key];
                }

                return item ? props.renderRow.apply(props, [item, sectionId, rowId].concat(args)) : null;
            }
        }, {
            key: "getInnerViewNode",
            value: function getInnerViewNode() {
                return this.refs.listView.getInnerViewNode();
            }
        }, {
            key: "scrollTo",
            value: function scrollTo() {
                var _refs$listView;

                (_refs$listView = this.refs.listView).scrollTo.apply(_refs$listView, arguments);
            }
        }, {
            key: "setNativeProps",
            value: function setNativeProps(props) {
                this.refs.listView.setNativeProps(props);
            }
        }]);

        return ListView;
    }(_react3.default.Component));

    exports.default = ListView;
    ListView.propTypes = {
        dataSource: _propTypes2.default.instanceOf(ListViewDataSource).isRequired,
        renderRow: _propTypes2.default.func.isRequired
    };
    ListView.DataSource = ListViewDataSource;
});